<content
  xmlns="http://cnx.rice.edu/cnxml"
  xmlns:data="http://dev.w3.org/html5/spec/#custom">

<!-- The following sections are a "HACK" to get the ccap-physics styling and numbering to work -->
<section class="book"><title>Interactive Examples</title>
<section class="chapter"><title>First stab (chapter)</title>
<section><title>Tangle, d3, and MathJax</title>


  <!-- ============== -->
  <!-- Tangle Example -->
  <!-- ============== -->
  <example>
    <title>Tangle Example</title>
    <section id="tangle"

data:script="
//
&#10;//  CookieExample.js
&#10;//  Tangle
&#10;//
&#10;//  Created by Bret Victor on 6/10/11.
&#10;//  (c) 2011 Bret Victor.  MIT open-source license.
&#10;//
&#10;
&#10;var model = {
&#10;
&#10;  initialize: function () {
&#10;      this.parkCount = 278;
&#10;      this.oldAdmission = 12;
&#10;      this.registeredVehicleCount = 28e6;  // http://www.yesforstateparks.com/get-the-facts/fact-sheets/general-fact-sheet
&#10;      this.taxpayerCount = 13657632;  // http://trac.syr.edu/tracirs/findings/aboutTP/states/California/counties/06000/06000main.html
&#10;      this.oldVisitorCount = 75e6;  // http://parks.ca.gov/pages/712/files/budget%20fact%20sheet%20w-graphics%20-%2001-14-08.pdf
&#10;      this.oldBudget = 400e6; // this is not really correct, it ignores revenue, but I couldn't find any revenue data
&#10;      this.oldClosedParkCount = 150;
&#10;
&#10;      this.percentOfAdmissionConvertedToRevenue = 0.1;  // total BS, couldn't find real data, just trying to make the numbers work
&#10;      this.percentInStateVistors = 85;
&#10;      this.percentVehicleOwners = 95;
&#10;
&#10;      this.tax = 18;
&#10;      this.percentCompliance = 100;
&#10;      this.isTaxPerVehicle = true;
&#10;      this.newAdmission = 0;
&#10;      this.newAdmissionAppliesToEveryone = false;
&#10;  },
&#10;  
&#10;  update: function () {
&#10;      var taxCount = this.isTaxPerVehicle ? this.registeredVehicleCount : this.taxpayerCount;
&#10;      this.taxCollected = this.tax * this.percentCompliance/100 * taxCount;
&#10;      
&#10;      var fractionOfVisitorsEligibleForNewAdmission = this.newAdmissionAppliesToEveryone ? 1 :
&#10;          (this.percentInStateVistors/100 * (this.isTaxPerVehicle ? (this.percentVehicleOwners/100) : 1));
&#10;      var averageAdmission = this.oldAdmission + fractionOfVisitorsEligibleForNewAdmission * (this.newAdmission - this.oldAdmission);
&#10;
&#10;      // fake demand curve
&#10;      this.newVisitorCount = this.oldVisitorCount * Math.max(0.2, 1 + 0.5*Math.atan(1 - averageAdmission/this.oldAdmission));
&#10;      
&#10;      var oldRevenue = this.oldVisitorCount * this.oldAdmission * this.percentOfAdmissionConvertedToRevenue;
&#10;      var newRevenue = this.newVisitorCount * averageAdmission * this.percentOfAdmissionConvertedToRevenue;
&#10;      
&#10;      this.deltaRevenue = newRevenue - oldRevenue;
&#10;      this.deltaBudget = this.taxCollected + this.deltaRevenue;
&#10;      this.deltaVisitorCount = this.newVisitorCount - this.oldVisitorCount;
&#10;      this.relativeVisitorCount = Math.abs(this.deltaVisitorCount / this.oldVisitorCount);
&#10;
&#10;      this.budget = this.oldBudget + this.deltaBudget;
&#10;      
&#10;      var maintainanceBudget = 600e6;
&#10;      var repairBudget = 750e6;
&#10;      var maxBudget = 1000e6;
&#10;      
&#10;      if (this.budget &lt; maintainanceBudget) {
&#10;          this.scenarioIndex = 0;
&#10;          this.closedParkCount = this.oldClosedParkCount * (maintainanceBudget - this.budget) / (maintainanceBudget - this.oldBudget);
&#10;          this.closedParkCount = Math.round(this.closedParkCount);
&#10;      }
&#10;      else if (this.budget &lt; repairBudget) {
&#10;          this.scenarioIndex = 1;
&#10;      }
&#10;      else if (this.budget &lt; maxBudget) {
&#10;          this.scenarioIndex = 2;
&#10;          this.restorationTime = Math.round(10 - 9 * (this.budget - repairBudget) / (maxBudget - repairBudget));
&#10;      }
&#10;      else {
&#10;          this.scenarioIndex = 3;
&#10;          this.surplus = this.budget - maxBudget;
&#10;      }
&#10;  },
&#10;}
&#10;
&#10;new Tangle(config.context,model);
&#10;">
      <title>Proposition 21:  Vehicle License Fee for State Parks</title>
      <section>
        <title>The way it is now:</title>
        <para>California has <span data:var="parkCount"><!-- nothing --></span> state parks, including state beaches and historic parks. 
          The current $<span data:var="oldBudget" data:format="e6"><!-- nothing --></span> million budget is insufficient to maintain these parks, and <span data:var="oldClosedParkCount"><!-- nothing --></span> parks will be shut down at least part-time.
          Most parks charge <span data:var="oldAdmission" data:format="dollars"><!-- nothing --></span> per vehicle for admission.</para>
      </section>
      <section>
        <title>What Prop 21 would do:</title>
        <para>Proposes to charge car owners an extra $18 on their annual registration bill, to go into the state park fund.  Cars that pay the charge would have free park admission.</para>
      </section>
      <section>
        <title>Analysis:</title>
        <para>Suppose that an extra <span data:var="tax" data:format="$%d" class="TKAdjustableNumber" data:min="0" data:max="50"><!-- nothing --></span>
                    
                   was charged to
      <span data:var="percentCompliance" class="TKAdjustableNumber" data:min="0" data:max="100" data:step="5">%</span>
                    
                   of
      <span data:var="isTaxPerVehicle" class="TKToggle TKSwitch">
            <span>California taxpayers</span>
            <span>vehicle registrations</span>
          </span>
                    
                  .
          Park admission would be <span data:var="newAdmission" data:format="free" class="TKAdjustableNumber" data:min="0" data:max="25"><!-- nothing --></span>
                    
                   for
      <span data:var="newAdmissionAppliesToEveryone" class="TKToggle TKSwitch">
            <span>those who paid the charge</span>
            <span>everyone</span>
          </span>
                    
                  .
  </para>
        <para>This would <span data:var="deltaBudget" class="TKSwitchPositiveNegative">
            <span>collect an extra</span>
            <span>lose</span>
          </span>
                    
                  
          $<span data:var="deltaBudget" data:format="abs_e6"><!-- nothing --></span>
                    
                   million
          ($<span data:var="taxCollected" data:format="e6"><!-- nothing --></span>
                    
                   million from the tax,
      <span data:var="deltaRevenue" class="TKSwitchPositiveNegative">
            <span>plus</span>
            <span>minus</span>
          </span>
                    
                  
          $<span data:var="deltaRevenue" data:format="abs_e6"><!-- nothing --></span>
                    
                   million
      <span data:var="deltaRevenue" class="TKSwitchPositiveNegative">
            <span>additional</span>
            <span>lost</span>
          </span>
                    
                   revenue from admission)
          for a total state park budget of $<span data:var="budget" data:format="e6"><!-- nothing --></span>
                    
                   million.
          
  <span data:var="scenarioIndex" class="TKSwitch">
            <span>This is not sufficient to maintain the parks, and
          <span data:var="closedParkCount"><!-- nothing --></span>
                            
                              parks would be shut down at least part-time.</span>
            <span>This is sufficient to maintain the parks in their current state, but not fund
                  a program to bring safety and cleanliness up to acceptable standards.</span>
            <span>This is sufficient to maintain the parks in their current state, plus fund a program to 
                  bring safety and cleanliness up to acceptable standards over the next
          <span data:var="restorationTime"><!-- nothing --></span>
                            
                           years.</span>
            <span>This is sufficient to maintain the parks and bring safety and cleanliness up to acceptable standards,
                  leaving a $<span data:var="surplus" data:format="e6"><!-- nothing --></span>
                            
                           million per year surplus.</span>
          </span>
        </para>
        <para>Park attendance would
      <span data:var="deltaVisitorCount" class="TKSwitchPositiveNegative">
            <span>rise</span>
            <span>fall</span>
          </span>
                    
                   by
      <span data:var="relativeVisitorCount" data:format="percent"><!-- nothing --></span>
                    
                  , to
      <span data:var="newVisitorCount" data:format="e6"><!-- nothing --></span>
                    
                   million visits each year.</para>
      </section>
    </section>
  </example>
  <!-- ============== -->
  <!-- d3 Chord Example -->
  <!-- ============== -->
  <example>
    <title>Interactive Chord Example (using the d3 library)</title>
    <section><title>Euro Debt Crisis</title>
    <figure id="d3-chord">
      <media alt=""
data:input="creditor,debtor,amount,risk
&#10;Britain,France,22.4,3
&#10;Britain,Greece,0.55,0
&#10;Britain,Italy,26,0
&#10;Britain,Portugal,19.4,0
&#10;Britain,United States,345,1
&#10;France,Germany,53.8,1
&#10;France,Greece,53.9,0
&#10;France,Ireland,17.3,0
&#10;France,Italy,366,0
&#10;France,Japan,7.73,1
&#10;France,Portugal,18.3,0
&#10;France,Spain,118,2
&#10;France,United States,322,1
&#10;Germany,Britain,321,1
&#10;Germany,Greece,19.3,0
&#10;Germany,Ireland,48.9,0
&#10;Germany,Portugal,32.5,0
&#10;Germany,Spain,57.6,2
&#10;Germany,United States,324,1
&#10;Ireland,Britain,12,1
&#10;Ireland,Greece,0.34,0
&#10;Ireland,Spain,6.38,2
&#10;Italy,Germany,111,1
&#10;Italy,Greece,3.22,0
&#10;Italy,Ireland,2.83,0
&#10;Italy,Portugal,0.87,0
&#10;Japan,Britain,28.2,1
&#10;Japan,Germany,88.5,1
&#10;Japan,Greece,1.37,0
&#10;Japan,Ireland,18.9,0
&#10;Japan,Italy,38.8,0
&#10;Japan,Portugal,2.18,0
&#10;Japan,Spain,25.9,2
&#10;Japan,United States,796,1
&#10;Portugal,Greece,10.1,0
&#10;Portugal,Ireland,3.77,0
&#10;Portugal,United States,0.52,1
&#10;Spain,Britain,326,1
&#10;Spain,Greece,0.78,0
&#10;Spain,Italy,9.79,0
&#10;Spain,Portugal,62,0
&#10;Spain,United States,163,1
&#10;United States,Greece,3.1,0
&#10;United States,Ireland,11.1,0
&#10;United States,Italy,3.16,0"

data:script="// Chart dimensions.
&#10;var w = 400,
&#10;    h = 300,
&#10;    r1 = Math.min(w, h) / 2 - 40,
&#10;    r0 = r1 - 20,
&#10;    format = d3.format(&quot;,.3r&quot;);
&#10;
&#10;var innerRadius = r0,
&#10;    outerRadius = r1;
&#10;
&#10;
&#10;// Square matrices, asynchronously loaded; credits is the transpose of debits.
&#10;var debits = [],
&#10;    credits = [];
&#10;
&#10;// The chord layout, for computing the angles of chords and groups.
&#10;var layout = d3.layout.chord()
&#10;    .sortGroups(d3.descending)
&#10;    .sortSubgroups(d3.descending)
&#10;    .sortChords(d3.descending)
&#10;    .padding(.04);
&#10;
&#10;// The color scale, for different categories of &quot;worrisome&quot; risk.
&#10;var fill = d3.scale.ordinal()
&#10;    .domain([0, 1, 2])
&#10;    .range([&quot;#DB704D&quot;, &quot;#D2D0C6&quot;, &quot;#ECD08D&quot;, &quot;#F8EDD3&quot;]);
&#10;
&#10;// The arc generator, for the groups.
&#10;var arc = d3.svg.arc()
&#10;    .innerRadius(r0)
&#10;    .outerRadius(r1);
&#10;
&#10;// The chord generator (quadratic Bézier), for the chords.
&#10;var chord = d3.svg.chord()
&#10;    .radius(r0);
&#10;
&#10;// Add an SVG element for each diagram, and translate the origin to the center.
&#10;var svg = d3.select(config.contextSelector).selectAll(&quot;div&quot;)
&#10;    .data([debits, credits])
&#10;  .enter().append(&quot;div&quot;)
&#10;    .style(&quot;display&quot;, &quot;inline-block&quot;)
&#10;//    .style(&quot;width&quot;, w + &quot;px&quot;)
&#10;//    .style(&quot;height&quot;, h + &quot;px&quot;)
&#10;    .style(&quot;width&quot;, &quot;50%&quot;)
&#10;  .append(&quot;svg:svg&quot;)
&#10;//    .attr(&quot;width&quot;, w)
&#10;//    .attr(&quot;height&quot;, h)
&#10;    .attr(&quot;viewport&quot;, '0 0 ' + w + ' ' + h)
&#10;  .append(&quot;svg:g&quot;)
&#10;    .attr(&quot;transform&quot;, &quot;translate(&quot; + w / 2 + &quot;,&quot; + h / 2 + &quot;)&quot;);
&#10;
&#10;// Load our data file…
&#10;var data = d3.csv.parse(config.input);
&#10;  var countries = {},
&#10;      array = [],
&#10;      n = 0;
&#10;
&#10;  // Compute a unique id for each country.
&#10;  data.forEach(function(d) {
&#10;    d.creditor = country(d.creditor);
&#10;    d.debtor = country(d.debtor);
&#10;    d.debtor.risk = d.risk;
&#10;    d.valueOf = value; // convert object to number implicitly
&#10;  });
&#10;
&#10;  // Initialize a square matrix of debits and credits.
&#10;  for (var i = 0; i &lt; n; i++) {
&#10;    debits[i] = [];
&#10;    credits[i] = [];
&#10;    for (var j = 0; j &lt; n; j++) {
&#10;      debits[i][j] = 0;
&#10;      credits[i][j] = 0;
&#10;    }
&#10;  }
&#10;
&#10;  // Populate the matrices, and stash a map from id to country.
&#10;  data.forEach(function(d) {
&#10;    debits[d.creditor.id][d.debtor.id] = d;
&#10;    credits[d.debtor.id][d.creditor.id] = d;
&#10;    array[d.creditor.id] = d.creditor;
&#10;    array[d.debtor.id] = d.debtor;
&#10;  });
&#10;
&#10;  // For each diagram…
&#10;  svg.each(function(matrix, j) {
&#10;    var svg = d3.select(this);
&#10;
&#10;    // Compute the chord layout.
&#10;    layout.matrix(matrix);
&#10;
&#10;    // Add chords.
&#10;    svg.selectAll(&quot;path.chord&quot;)
&#10;      .data(layout.chords)
&#10;      .enter().append(&quot;svg:path&quot;)
&#10;        .attr(&quot;class&quot;, &quot;chord&quot;)
&#10;        .attr('stroke-width', '.75')  // From the CSS file
&#10;        .attr('fill-opacity', '.75') // From the CSS file
&#10;        .style(&quot;fill&quot;, function(d) { return fill(d.source.value.risk); })
&#10;        .style(&quot;stroke&quot;, function(d) { return d3.rgb(fill(d.source.value.risk)).darker(); })
&#10;        .attr(&quot;d&quot;, chord)
&#10;      .append(&quot;svg:title&quot;)
&#10;        .text(function(d) { return d.source.value.debtor.name + &quot; owes &quot; + d.source.value.creditor.name + &quot; $&quot; + format(d.source.value) + &quot;B.&quot;; });
&#10;
&#10;    // Add groups.
&#10;    var g = svg.selectAll(&quot;g.group&quot;)
&#10;      .data(layout.groups)
&#10;      .enter().append(&quot;svg:g&quot;)
&#10;        .attr(&quot;class&quot;, &quot;group&quot;);
&#10;
&#10;    // Add the group arc.
&#10;    g.append(&quot;svg:path&quot;)
&#10;        .style(&quot;fill&quot;, function(d) { return fill(array[d.index].risk); })
&#10;        .attr(&quot;id&quot;, function(d, i) { return &quot;group&quot; + d.index + &quot;-&quot; + j; })
&#10;        .attr(&quot;d&quot;, arc)
&#10;        .on(&quot;mouseover&quot;, fade(.1))
&#10;        .on(&quot;mouseout&quot;, fade(1))
&#10;        .attr('stroke', '#000') // From the css file
&#10;      .append(&quot;svg:title&quot;)
&#10;        .text(function(d) { return array[d.index].name + &quot; &quot; + (j ? &quot;owes&quot; : &quot;is owed&quot;) + &quot; $&quot; + format(d.value) + &quot;B.&quot;; });
&#10;
&#10;    // Add the group label (but only for large groups, where it will fit).
&#10;    // An alternative labeling mechanism would be nice for the small groups.
&#10;    g.append(&quot;svg:text&quot;)
&#10;        .attr(&quot;x&quot;, 6)
&#10;        .attr(&quot;dy&quot;, 15)
&#10;        .attr('font-size', '11px') // From the CSS file
&#10;        .attr('font-family', 'sans-serif') // From the CSS file
&#10;        .attr('pointer-events', 'none') // From the CSS file
&#10;        .filter(function(d) { return d.value > 110; })
&#10;      .append(&quot;svg:textPath&quot;)
&#10;        .attr(&quot;xlink:href&quot;, function(d) { return &quot;#group&quot; + d.index + &quot;-&quot; + j; })
&#10;        .text(function(d) { return array[d.index].name; });
&#10;  });
&#10;
&#10;  // Memoize the specified country, computing a unique id.
&#10;  function country(d) {
&#10;    return countries[d] || (countries[d] = {
&#10;      name: d,
&#10;      id: n++
&#10;    });
&#10;  }
&#10;
&#10;  // Converts a debit object to its primitive numeric value.
&#10;  function value() {
&#10;    return +this.amount;
&#10;  }
&#10;
&#10;
&#10;var ticks = svg.append(&quot;g&quot;)
&#10;  .selectAll(&quot;g&quot;)
&#10;    .data(layout.groups)
&#10;  .enter().append(&quot;g&quot;)
&#10;  .selectAll(&quot;g&quot;)
&#10;    .data(groupTicks)
&#10;  .enter().append(&quot;g&quot;)
&#10;    .attr(&quot;class&quot;, &quot;ticks&quot;)
&#10;    .attr(&quot;opacity&quot;, 0)
&#10;    .attr(&quot;transform&quot;, function(d) {
&#10;      return &quot;rotate(&quot; + (d.angle * 180 / Math.PI - 90) + &quot;)&quot;
&#10;          + &quot;translate(&quot; + outerRadius + &quot;,0)&quot;;
&#10;    });
&#10;
&#10;ticks.append(&quot;line&quot;)
&#10;    .attr(&quot;x1&quot;, 1)
&#10;    .attr(&quot;y1&quot;, 0)
&#10;    .attr(&quot;x2&quot;, 5)
&#10;    .attr(&quot;y2&quot;, 0)
&#10;    .style(&quot;stroke&quot;, &quot;#000&quot;);
&#10;
&#10;ticks.append(&quot;text&quot;)
&#10;    .attr(&quot;x&quot;, 8)
&#10;    .attr(&quot;dy&quot;, &quot;.35em&quot;)
&#10;    .attr(&quot;text-anchor&quot;, function(d) {
&#10;      return d.angle > Math.PI ? &quot;end&quot; : null;
&#10;    })
&#10;    .attr(&quot;transform&quot;, function(d) {
&#10;      return d.angle > Math.PI ? &quot;rotate(180)translate(-16)&quot; : null;
&#10;    })
&#10;    .text(function(d) { return d.label; });
&#10;
&#10;/** Returns an array of tick angles and labels, given a group. */
&#10;function groupTicks(d) {
&#10;  var k = (d.endAngle - d.startAngle) / d.value;
&#10;  var tooSmall = d.value &lt; 100;
&#10;  if (!tooSmall) {
&#10;      return d3.range(0, d.value, 50).map(function(v, i) {
&#10;        return {
&#10;          angle: v * k + d.startAngle,
&#10;          label: i % 5 ? null : v
&#10;        };
&#10;      });
&#10;  } else {
&#10;    return [];
&#10;  }
&#10;}
&#10;
&#10;/** Returns an event handler for fading a given chord group. */
&#10;function fade(opacity) {
&#10;  return function(g, i) {
&#10;    svg.selectAll(&quot;path.chord&quot;)
&#10;        .filter(function(d) {
&#10;          return d.source.index != i &amp;&amp; d.target.index != i;
&#10;        })
&#10;      .transition()
&#10;        .style(&quot;opacity&quot;, opacity);
&#10;
&#10;    svg.selectAll(&quot;.ticks&quot;)
&#10;      .transition()
&#10;        .style(&quot;opacity&quot;, 1-opacity);
&#10;
&#10;  };
&#10;}"      
      ><image src="invalid.jpg" mime-type="xml/svg"/></media>
      <caption>Here are two images showing (a) how much each country is owed and (b) how much each country owes. (Hover over different parts for a tooltip)</caption>
    </figure>
    </section>
  </example>
  <!-- ============== -->
  <!-- d3 Bezier Curves -->
  <!-- ============== -->
  <section><title>Interactive Animations (using the d3 library)</title>
  <para>This next figure is just javascript. Dragging the handles in one image adjusts the rest.</para>
  <figure>
    <media alt="" data:script="var scalar = 3/5,
&#10;    w = 125*scalar,
&#10;    h = 150*scalar,
&#10;    t = .75,
&#10;    delta = .01,
&#10;    padding = 10,
&#10;    points = [{x: 5*scalar, y: 125*scalar}, {x: 0, y: 0}, {x: 60*scalar, y: 50*scalar}, {x: 100*scalar, y: 125*scalar}, {x: 112*scalar, y: 60*scalar}],
&#10;    bezier = {},
&#10;    line = d3.svg.line().x(x).y(y),
&#10;    n = 4,
&#10;    stroke = d3.scale.category20b(),
&#10;    orders = d3.range(2, n + 2);
&#10;
&#10;var vis = d3.select(config.contextSelector).selectAll('svg')
&#10;    .data(orders)
&#10;  .enter().append('svg')
&#10;    .attr('width', w + 2 * padding)
&#10;    .attr('height', h + 2 * padding)
&#10;  .append('g')
&#10;    .attr('transform', 'translate(' + padding + ',' + padding + ')');
&#10;
&#10;update();
&#10;
&#10;vis.selectAll('circle.control')
&#10;    .data(function(d) { return points.slice(0, d) })
&#10;  .enter().append('circle')
&#10;    .attr('class', 'control')
&#10;    .attr('r', 4)
&#10;    .attr('cx', x)
&#10;    .attr('cy', y)
&#10;    .call(d3.behavior.drag()
&#10;      .on('dragstart', function(d) {
&#10;        this.__origin__ = [d.x, d.y];
&#10;      })
&#10;      .on('drag', function(d) {
&#10;        d.x = Math.min(w, Math.max(0, this.__origin__[0] += d3.event.dx));
&#10;        d.y = Math.min(h, Math.max(0, this.__origin__[1] += d3.event.dy));
&#10;        bezier = {};
&#10;        update();
&#10;        vis.selectAll('circle.control')
&#10;          .attr('cx', x)
&#10;          .attr('cy', y);
&#10;      })
&#10;      .on('dragend', function() {
&#10;        delete this.__origin__;
&#10;      }));
&#10;
&#10;vis.append('text')
&#10;  .attr('class', 't')
&#10;  .attr('x', w / 2)
&#10;  .attr('y', h)
&#10;  .attr('text-anchor', 'middle');
&#10;
&#10;vis.selectAll('text.controltext')
&#10;    .data(function(d) { return points.slice(0, d); })
&#10;  .enter().append('text')
&#10;    .attr('class', 'controltext')
&#10;    .attr('dx', '10px')
&#10;    .attr('dy', '.4em')
&#10;    .text(function(d, i) { return 'P' + i });
&#10;
&#10;var last = 0;
&#10;d3.timer(function(elapsed) {
&#10;  t = (t + (elapsed - last) / 5000) % 1;
&#10;  last = elapsed;
&#10;  update();
&#10;});
&#10;
&#10;function update() {
&#10;  var interpolation = vis.selectAll('g')
&#10;      .data(function(d) { return getLevels(d, t); });
&#10;  interpolation.enter().append('g')
&#10;      .style('fill', colour)
&#10;      .style('stroke', colour);
&#10;
&#10;  var circle = interpolation.selectAll('circle')
&#10;      .data(Object);
&#10;  circle.enter().append('circle')
&#10;      .attr('r', 2);
&#10;  circle
&#10;      .attr('cx', x)
&#10;      .attr('cy', y);
&#10;
&#10;  var path = interpolation.selectAll('path')
&#10;      .data(function(d) { return [d]; });
&#10;  path.enter().append('path')
&#10;      .attr('class', 'line')
&#10;      .attr('d', line);
&#10;  path.attr('d', line);
&#10;
&#10;  var curve = vis.selectAll('path.curve')
&#10;      .data(getCurve);
&#10;  curve.enter().append('path')
&#10;      .attr('class', 'curve');
&#10;  curve.attr('d', line);
&#10;
&#10;  vis.selectAll('text.controltext')
&#10;      .attr('x', x)
&#10;      .attr('y', y);
&#10;  vis.selectAll('text.t')
&#10;      .text('t=' + t.toFixed(2));
&#10;}
&#10;
&#10;function interpolate(d, p) {
&#10;  if (arguments.length &lt; 2) p = t;
&#10;  var r = [];
&#10;  for (var i=1; i&lt;d.length; i++) {
&#10;    var d0 = d[i-1], d1 = d[i];
&#10;    r.push({x: d0.x + (d1.x - d0.x) * p, y: d0.y + (d1.y - d0.y) * p});
&#10;  }
&#10;  return r;
&#10;}
&#10;
&#10;function getLevels(d, t_) {
&#10;  if (arguments.length &lt; 2) t_ = t;
&#10;  var x = [points.slice(0, d)];
&#10;  for (var i=1; i&lt;d; i++) {
&#10;    x.push(interpolate(x[x.length-1], t_));
&#10;  }
&#10;  return x;
&#10;}
&#10;
&#10;function getCurve(d) {
&#10;  var curve = bezier[d];
&#10;  if (!curve) {
&#10;    curve = bezier[d] = [];
&#10;    for (var t_=0; t_&lt;=1; t_+=delta) {
&#10;      var x = getLevels(d, t_);
&#10;      curve.push(x[x.length-1][0]);
&#10;    }
&#10;  }
&#10;  return [curve.slice(0, t / delta + 1)];
&#10;}
&#10;
&#10;function x(d) { return d.x; }
&#10;function y(d) { return d.y; }
&#10;function colour(d, i) {
&#10;  stroke(-i);
&#10;  return d.length > 1 ? stroke(i) : 'red';
&#10;}"><image src="invalid.jpg" mime-type="xml/svg"/></media>
      <caption>Bezier curves wdrawn with 2 to 5 points</caption>
    </figure>
  </section>

  <!-- ============== -->
  <!-- nvd3 Stacked Area Chart Example -->
  <!-- ============== -->
  <section>
    <title>Stacked Area Chart (using the nvd3 library)</title>
    <figure id="nvd3-area" data:input="">
      <media alt=""
data:script="
var data = [
  { label:'Agriculture and Engineering', value:10 },
  { label:'Arts and Design', value:10 },
  { label:'Building and Grounds Cleaning and Maintenance', value:12 },
  { label:'Business and Financial', value:17 },
  { label:'Community and Social Service', value:24 },
  { label:'Computer and Information Technology', value:22 },
  { label:'Construction and Extraction', value:22 },
  { label:'Education, Training, and Library', value:15 },
  { label:'Entertainment and Sports', value:16 },
  { label:'Farming, Fishing, and Forestry', value:-2 },
  { label:'Food Preparation and Serving', value:10 },
  { label:'Healthcare', value:29 },
  { label:'Installatin, Maintenance, and Repair', value:15 },
  { label:'Legal', value:11 },
  { label:'Life, Physical, and Social Science', value:16   },
  { label:'Management', value:7 },
  { label:'Math', value:17 },
  { label:'Media and Communication', value:13 },
  { label:'Office and Administrative Support', value:10 },
  { label:'Personal Care and Service', value:27 },
  { label:'Production', value:4 },
  { label:'Protective Service', value:11 },
  { label:'Sales', value:13 },
  { label:'Transportation and Material Moving', value:15 },
];


/* ----------------------------------------
 * Graph Code
 * ----------------------------------------
 */

data = [ { color:'#0033ff', key:'Blah', values:data } ];

nv.addGraph(function() {
  var chart = nv.models.multiBarHorizontalChart()
      .x(function(d) { return d.label })
      .y(function(d) { return d.value })
      .margin({top: 30, right: 20, bottom: 50, left: 175})
      .showValues(true)
      .tooltips(false)
      .showControls(false)
      .showLegend(false);

  chart.yAxis
      .tickFormat(d3.format(',.2f'));

    /* PHIL Was: d3.select('#chart svg') */
    d3.select(config.contextSelector).append('svg').attr('height', '400px')
      .datum(data)
    .transition().duration(500)
      .call(chart);

  nv.utils.windowResize(chart.update);

  return chart;
});


"><image src="invalid.jpg" mime-type="xml/svg"/></media>
      <caption>Here is a figure with a multi-line chart showing the poverty rate among different age groups over time in the United States.</caption>
    </figure>
  </section>


  <!-- ============== -->
  <!-- nvd3 Multi Chart Example -->
  <!-- ============== -->
  <section>
    <title>Interactive Multi line chart example (using the nvd3 library)</title>
    <para>Alas, I'd be remiss without including a chart. You can click in the legend to include or exclude certain lines.</para>
    <figure id="d3-bar" data:input="{}">
      <media alt=""
data:script="
var startYear = 1959;
var endYear = 2010;

var data = [
  { key:'Recession Year', values:getBarData(), bar: true, color: 'Wheat' },
  { key:'Under 18 years', values:getLineData([27,22]) }, 
  { key:'18 to 64 years', values:getLineData([17,14]) }, 
  { key:'65 years and older', values:getLineData([35,9]) }
];

function getBarData() {
  var values = new Array();
  for (i=startYear; endYear > i; i++) {
    values.push(getBarDataPoint(i));
  }
  return values;
}

function getBarDataPoint(year) {
  var recessionYears = [
    1960, 1970, 1975, 1980, 1982, 1983, 1990, 2000, 2008, 2009 ];
  return [year, recessionYears.indexOf(year) >= 0];
}

function getLineData(line) {
  var values = new Array();
  for (i=startYear; endYear > i; i++) {
    values.push(getLineDataPoint(i, line));
  }
  return values;
}

function getLineDataPoint(year, line) {
  var rand = Math.random()*2-1;
  var startPoint = line[0];
  var endPoint = line[1];
  var pointDiff = endPoint - startPoint;
  var yearDiff = endYear - startYear;
  var yearOffset = year - startYear;
  var avgPointValue = startPoint + yearOffset*(pointDiff/yearDiff);
  return [year, avgPointValue+rand];
}

/* ----------------------------------------
 * Graph Code
 * ----------------------------------------
 */

nv.addGraph(function() {
    var chart = nv.models.linePlusBarChart()
          .margin({top: 30, right: 60, bottom: 50, left: 70})
          .x(function(d,i) { return i })
          .y(function(d) { return d[1] })
          .color(d3.scale.category10().range());

    chart.xAxis
      .showMaxMin(false)
      .tickFormat(function(d) { return startYear+d });

    chart.y1Axis
       .tickFormat(function(d) { return '' });

    chart.y2Axis
       .tickFormat(function(d) { return d3.format(',f')(d) });

    chart.bars.forceY([0]);

    /* PHIL Was: d3.select('#chart svg') */
    d3.select(config.contextSelector).append('svg').attr('height', '400px')
        .datum(data)
      .transition().duration(500).call(chart);

    nv.utils.windowResize(chart.update);

    return chart;
});
"><image src="invalid.jpg" mime-type="xml/svg"/></media>
      <caption>Here is a figure with a multi-line chart showing the poverty rate among different age groups over time in the United States.</caption>
    </figure>
  </section>


  <!-- ============== -->
  <!-- nvd3 Stacked Area Chart Example -->
  <!-- ============== -->
  <section>
    <title>Stacked Area Chart (using the nvd3 library)</title>
    <figure data:input="">
      <media alt=""
data:script="

var data = [{'key':'Module','values':[{'x':-58732718400000,'y':155,'size':221.01883400229104},
{'x':-58727444400000,'y':140,'size':159.66325288529413},
{'x':-58724766000000,'y':228,'size':189.54606057608936},
{'x':-58722346800000,'y':188,'size':101.37510813455641},
{'x':-58748616000000,'y':116,'size':246.17450535309905},
{'x':-58817041200000,'y':60,'size':234.83035426035968},
{'x':-58643380800000,'y':1035,'size':3.4639454057001493},
{'x':-58640788800000,'y':650,'size':5.96934375671109},
{'x':-58685544000000,'y':129,'size':14.421627451170735},
{'x':-58627652400000,'y':137,'size':96.3431626324572},
{'x':-58772289600000,'y':33,'size':202.4869254661715},
{'x':-58648737600000,'y':88,'size':14.941305651576071},
{'x':-58706452800000,'y':214,'size':58.09259558715674},
{'x':-58646059200000,'y':361,'size':1.8346978969968748},
{'x':-58695908400000,'y':118,'size':66.25323384458365},
{'x':-58654008000000,'y':79,'size':10.170528905960335},
{'x':-58638110400000,'y':180,'size':11.030687190631129},
{'x':-58714401600000,'y':466,'size':92.64818191957478},
{'x':-58764340800000,'y':159,'size':37.179170102388944},
{'x':-58624977600000,'y':135,'size':4.533070645929252},
{'x':-58782830400000,'y':45,'size':23.458052408500002},
{'x':-58703860800000,'y':161,'size':54.32514130676973},
{'x':-58830091200000,'y':48,'size':69.25772817702558},
{'x':-58688136000000,'y':159,'size':27.37309479615682},
{'x':-58677595200000,'y':54,'size':31.579480375315004},
{'x':-58767019200000,'y':102,'size':207.78199218938101},
{'x':-58635514800000,'y':173,'size':20.3210797814617},
{'x':-58619707200000,'y':64,'size':2.3074216459288293},
{'x':-58690810800000,'y':148,'size':95.84321248898607},
{'x':-58856353200000,'y':29,'size':1.887336479628},
{'x':-58698586800000,'y':95,'size':37.705771252422444},
{'x':-58661694000000,'y':91,'size':26.608020764412597},
{'x':-58717080000000,'y':294,'size':317.6438617590935},
{'x':-58674916800000,'y':148,'size':100.99642423792166},
{'x':-58785505200000,'y':53,'size':307.2393512637108},
{'x':-58798555200000,'y':49,'size':1.03939592665},
{'x':-58656600000000,'y':81,'size':98.32912724453752},
{'x':-58682865600000,'y':111,'size':43.01557958496189},
{'x':-58780238400000,'y':62,'size':714.833091928596},
{'x':-58877438400000,'y':10,'size':1.00002848842},
{'x':-58874846400000,'y':65,'size':1901.27706426},
{'x':-58630158000000,'y':328,'size':332.16278007819295},
{'x':-58611758400000,'y':48,'size':2.6783282349532254},
{'x':-58761745200000,'y':100,'size':41.166185665354604},
{'x':-58737988800000,'y':52,'size':119.97882511020363},
{'x':-58659274800000,'y':75,'size':12.394302932976025},
{'x':-58709131200000,'y':683,'size':34.60799933187843},
{'x':-58614436800000,'y':91,'size':8.941783917208905},
{'x':-58835361600000,'y':23,'size':202.30244219501742},
{'x':-58787924400000,'y':58,'size':432.3024315441003},
{'x':-58753882800000,'y':148,'size':164.14126251273893},
{'x':-58617115200000,'y':58,'size':2.6744701238522692},
{'x':-58667050800000,'y':103,'size':7.410843567462857},
{'x':-58845902400000,'y':26,'size':1},
{'x':-58795876800000,'y':52,'size':647.3744328418378},
{'x':-58735396800000,'y':78,'size':100.44805782675616},
{'x':-58759066800000,'y':72,'size':166.1157498607921},
{'x':-58838040000000,'y':64,'size':1.0555457588153336},
{'x':-58777560000000,'y':73,'size':288.0164574428616},
{'x':-58774968000000,'y':51,'size':429.7787043290721},
{'x':-58843310400000,'y':31,'size':286.2221812896272},
{'x':-58840632000000,'y':46,'size':119.10135845615385},
{'x':-58693230000000,'y':89,'size':17.08000475146544},
{'x':-58719672000000,'y':104,'size':42.52882571003687},
{'x':-58680273600000,'y':61,'size':17.11094689829741},
{'x':-58622385600000,'y':73,'size':26.421055304761772},
{'x':-58711809600000,'y':266,'size':418.75575220612694},
{'x':-58887975600000,'y':16,'size':1},
{'x':-58751208000000,'y':65,'size':78.74159866923209},
{'x':-58880113200000,'y':47,'size':163.45449998774458},
{'x':-58730122800000,'y':98,'size':175.47540106631382},
{'x':-58827412800000,'y':68,'size':160.24140569713182},
{'x':-58832683200000,'y':35,'size':238.47053652718643},
{'x':-58664372400000,'y':131,'size':22.31054632620394},
{'x':-58669646400000,'y':75,'size':31.614457757669065},
{'x':-58651329600000,'y':62,'size':11.528440959977889},
{'x':-58740667200000,'y':68,'size':106.01410691202535},
{'x':-58632836400000,'y':235,'size':75.21712771284417},
{'x':-58743345600000,'y':50,'size':242.0860101729854},
{'x':-58848577200000,'y':38,'size':1},
{'x':-58672324800000,'y':127,'size':59.63882053236247},
{'x':-58814366400000,'y':31,'size':369.6849685383392},
{'x':-58809096000000,'y':70,'size':40.39976511927114},
{'x':-58769611200000,'y':79,'size':860.1083161083942},
{'x':-58701182400000,'y':133,'size':2.88638152472064},
{'x':-58790602800000,'y':42,'size':1},
{'x':-58819460400000,'y':86,'size':140.09632964809478},
{'x':-58756388400000,'y':80,'size':318.5528926988084},
{'x':-58822138800000,'y':48,'size':256.94647725870766},
{'x':-58745937600000,'y':99,'size':770.5616388043709},
{'x':-58869576000000,'y':82,'size':110.90562626370378},
{'x':-58824817200000,'y':46,'size':1532.686251531},
{'x':-58801147200000,'y':31,'size':652.9052546583871},
{'x':-58858948800000,'y':28,'size':124.0882726742613},
{'x':-58853674800000,'y':20,'size':99.98998066764705},
{'x':-58850996400000,'y':39,'size':210.61182788800002},
{'x':-58811774400000,'y':25,'size':259.561819025538},
{'x':-58893249600000,'y':16,'size':3.992964942202152},
{'x':-58793281200000,'y':32,'size':39.98837613990358},
{'x':-58864219200000,'y':8,'size':1.0000389285714286},
{'x':-58806504000000,'y':74,'size':4.2286790065},
{'x':-58803825600000,'y':76,'size':1.0072278461407913},
{'x':-58885297200000,'y':37,'size':262.4948623651111},
{'x':-58866897600000,'y':31,'size':27.218000950714288},
{'x':-58861627200000,'y':15,'size':1.00751021656},
{'x':-58872168000000,'y':101,'size':1.0463209395920428},
{'x':-58890571200000,'y':7,'size':12.777582111120001},
{'x':-58882618800000,'y':5,'size':1},
{'x':-58922107200000,'y':1,'size':312.95722044},
{'x':-58895841600000,'y':4,'size':43.30985460548333},
{'x':-58909060800000,'y':4,'size':358.0673100738333},
{'x':-58924785600000,'y':1,'size':341.958023993},
{'x':-58914154800000,'y':9,'size':658.0443579676584},
{'x':-58901198400000,'y':3,'size':167.28579704475},
{'x':-58916833200000,'y':7,'size':661.5999886931762},
{'x':-58906468800000,'y':9,'size':387.3138265963857},
{'x':-58911735600000,'y':4,'size':422.4650250166667},
{'x':-58903790400000,'y':8,'size':303.709186772781},
{'x':-58898520000000,'y':25,'size':461.9525457854451}]},
{'key':'Collection','values':[{'x':-58627652400000,'y':17,'size':1.0146149481149451},
{'x':-58727444400000,'y':17,'size':78.33089802778866},
{'x':-58737988800000,'y':13,'size':13.02367029892036},
{'x':-58614436800000,'y':9,'size':2.110289848359683},
{'x':-58748616000000,'y':19,'size':39.812051071619486},
{'x':-58722346800000,'y':22,'size':14.04502780502133},
{'x':-58698586800000,'y':20,'size':2.2403906378840066},
{'x':-58635514800000,'y':18,'size':1.1436740500541027},
{'x':-58619707200000,'y':20,'size':1.9859231111737687},
{'x':-58819460400000,'y':27,'size':1.963607334344689},
{'x':-58659274800000,'y':20,'size':22.751013589295802},
{'x':-58838040000000,'y':10,'size':1.001562532769643},
{'x':-58654008000000,'y':14,'size':1.0064940400420221},
{'x':-58674916800000,'y':16,'size':106.25285997646064},
{'x':-58785505200000,'y':32,'size':1.9468081288865937},
{'x':-58795876800000,'y':20,'size':1.012018239053735},
{'x':-58695908400000,'y':14,'size':60.295305311904364},
{'x':-58632836400000,'y':17,'size':1.9623109971007142},
{'x':-58730122800000,'y':19,'size':1.0085772094308711},
{'x':-58882618800000,'y':15,'size':66.1550032515054},
{'x':-58703860800000,'y':24,'size':9.346776954660575},
{'x':-58717080000000,'y':27,'size':726.0344650018618},
{'x':-58735396800000,'y':18,'size':52.74301978809736},
{'x':-58656600000000,'y':18,'size':17.57691301571414},
{'x':-58759066800000,'y':20,'size':6.095205028579514},
{'x':-58777560000000,'y':35,'size':54.42422668934888},
{'x':-58622385600000,'y':12,'size':10.0841345037125},
{'x':-58685544000000,'y':22,'size':6.126328372108985},
{'x':-58751208000000,'y':17,'size':1.008707033040259},
{'x':-58880113200000,'y':30,'size':1.2050034047524336},
{'x':-58643380800000,'y':13,'size':1.0120729549273815},
{'x':-58640788800000,'y':14,'size':1.010301775776624},
{'x':-58827412800000,'y':15,'size':1.4014077600059789},
{'x':-58806504000000,'y':26,'size':1.0842962295954837},
{'x':-58719672000000,'y':24,'size':14.212656351776722},
{'x':-58853674800000,'y':9,'size':8.154107177301785},
{'x':-58690810800000,'y':16,'size':9.944443889921896},
{'x':-58648737600000,'y':23,'size':5.812852930031295},
{'x':-58706452800000,'y':26,'size':25.392224933744554},
{'x':-58761745200000,'y':15,'size':1.0182721432962363},
{'x':-58753882800000,'y':59,'size':3.838300825066723},
{'x':-58680273600000,'y':7,'size':1.0368552327333334},
{'x':-58732718400000,'y':35,'size':1.0292568224963794},
{'x':-58843310400000,'y':19,'size':1.0029606782501095},
{'x':-58661694000000,'y':10,'size':1.0164114103627777},
{'x':-58711809600000,'y':18,'size':6.283662595051911},
{'x':-58701182400000,'y':15,'size':1.0349766221089503},
{'x':-58743345600000,'y':13,'size':142.5533896537901},
{'x':-58845902400000,'y':12,'size':1.0174214896019445},
{'x':-58617115200000,'y':9,'size':1.0019677344222222},
{'x':-58624977600000,'y':15,'size':42.51781567709484},
{'x':-58874846400000,'y':18,'size':1.007134742682129},
{'x':-58709131200000,'y':16,'size':21.921034491390806},
{'x':-58798555200000,'y':27,'size':24.354730813433346},
{'x':-58769611200000,'y':25,'size':0.8911788384948012},
{'x':-58664372400000,'y':14,'size':1.003732625616566},
{'x':-58848577200000,'y':15,'size':1.0058480175778206},
{'x':-58774968000000,'y':16,'size':3.7285669780746495},
{'x':-58693230000000,'y':16,'size':172.3862854976787},
{'x':-58714401600000,'y':17,'size':1.2620728706154083},
{'x':-58877438400000,'y':13,'size':1.0021682678314918},
{'x':-58638110400000,'y':9,'size':5.489093940840277},
{'x':-58611758400000,'y':2,'size':1},
{'x':-58803825600000,'y':12,'size':1.0136641683678174},
{'x':-58772289600000,'y':12,'size':5.255243252417035},
{'x':-58764340800000,'y':28,'size':79.57895472678224},
{'x':-58835361600000,'y':8,'size':2.2417351341357143},
{'x':-58830091200000,'y':12,'size':1.888921088697915},
{'x':-58782830400000,'y':16,'size':1.0122541493464923},
{'x':-58869576000000,'y':26,'size':1.039162303245452},
{'x':-58745937600000,'y':16,'size':1.005515342017826},
{'x':-58801147200000,'y':14,'size':163.44787270601958},
{'x':-58858948800000,'y':9,'size':228.60825622057914},
{'x':-58724766000000,'y':22,'size':1.0202539000430413},
{'x':-58809096000000,'y':17,'size':1.0645539422826065},
{'x':-58688136000000,'y':13,'size':22.117773258666265},
{'x':-58866897600000,'y':19,'size':1.0391299526315918},
{'x':-58767019200000,'y':19,'size':1.0103260272112062},
{'x':-58840632000000,'y':11,'size':5.542113372843669},
{'x':-58817041200000,'y':14,'size':1.9249735529059877},
{'x':-58790602800000,'y':13,'size':1.0071724524103138},
{'x':-58630158000000,'y':16,'size':2.023358048715283},
{'x':-58651329600000,'y':8,'size':1.0005664467666666},
{'x':-58814366400000,'y':14,'size':1.728660915260094},
{'x':-58669646400000,'y':23,'size':1.543640306425842},
{'x':-58780238400000,'y':28,'size':30.00754064825381},
{'x':-58850996400000,'y':7,'size':1.2568494948869047},
{'x':-58822138800000,'y':11,'size':1.0196863582065079},
{'x':-58864219200000,'y':6,'size':1.0294715653833333},
{'x':-58667050800000,'y':21,'size':1.1779077427441977},
{'x':-58824817200000,'y':9,'size':1.0027415058962699},
{'x':-58756388400000,'y':12,'size':1.0045690223860426},
{'x':-58861627200000,'y':13,'size':1.0008590061609586},
{'x':-58740667200000,'y':13,'size':36.04257535049926},
{'x':-58856353200000,'y':5,'size':1.0768738151766666},
{'x':-58811774400000,'y':13,'size':117.94848829182217},
{'x':-58646059200000,'y':12,'size':1.0013110323533334},
{'x':-58793281200000,'y':11,'size':1.0039711639749207},
{'x':-58677595200000,'y':10,'size':7.019788954345317},
{'x':-58885297200000,'y':7,'size':1.0029830076392856},
{'x':-58832683200000,'y':6,'size':1.1896017139666666},
{'x':-58911735600000,'y':1,'size':304.83699482},
{'x':-58898520000000,'y':2,'size':241.94871487249998},
{'x':-58903790400000,'y':1,'size':227.09608787},
{'x':-58872168000000,'y':13,'size':10.730721372579882},
{'x':-58672324800000,'y':17,'size':1.0011746048260457},
{'x':-58787924400000,'y':12,'size':1.1043033780840692},
{'x':-58682865600000,'y':4,'size':1.0037941069},
{'x':-58887975600000,'y':1,'size':2855.80349905},
{'x':-58895841600000,'y':1,'size':125.960938125}]},
{'key':'Derived Module','values':[{'x':-58648737600000,'y':44,'size':3.2982873305054743},
{'x':-58627652400000,'y':15,'size':1.0030278713466667},
{'x':-58651329600000,'y':59,'size':8.21087388648948},
{'x':-58674916800000,'y':21,'size':2.403977583216},
{'x':-58677595200000,'y':339,'size':8.287135129804632},
{'x':-58656600000000,'y':35,'size':9.244395722138636},
{'x':-58667050800000,'y':32,'size':5.99953407694597},
{'x':-58654008000000,'y':57,'size':5.824995769303584},
{'x':-58682865600000,'y':35,'size':1.3394249099065623},
{'x':-58669646400000,'y':40,'size':3.4875722756560874},
{'x':-58632836400000,'y':20,'size':1.01209906814448},
{'x':-58811774400000,'y':23,'size':2246.8132961572437},
{'x':-58643380800000,'y':163,'size':1.0109694271927618},
{'x':-58617115200000,'y':8,'size':1.0017085896883333},
{'x':-58727444400000,'y':2,'size':13.7869285185},
{'x':-58659274800000,'y':27,'size':2.373451164160608},
{'x':-58611758400000,'y':9,'size':1.037316267540873},
{'x':-58646059200000,'y':25,'size':1.8892595912644443},
{'x':-58685544000000,'y':19,'size':38.21556459274336},
{'x':-58622385600000,'y':10,'size':2.2803459847513095},
{'x':-58664372400000,'y':21,'size':1.0192239565167553},
{'x':-58680273600000,'y':33,'size':36.19752936943089},
{'x':-58638110400000,'y':23,'size':1.003203918566007},
{'x':-58635514800000,'y':23,'size':1.0009926087179166},
{'x':-58661694000000,'y':30,'size':3.7610524474449556},
{'x':-58703860800000,'y':3,'size':57.26229536268333},
{'x':-58740667200000,'y':2,'size':1.0036866898},
{'x':-58672324800000,'y':25,'size':1.0107026327557402},
{'x':-58630158000000,'y':27,'size':6.151841970017534},
{'x':-58624977600000,'y':22,'size':1.0518635272982748},
{'x':-58745937600000,'y':2,'size':1012.924881829},
{'x':-58706452800000,'y':4,'size':100.08112396312498},
{'x':-58614436800000,'y':16,'size':1.0441627383768808},
{'x':-58690810800000,'y':7,'size':1.0029447718159523},
{'x':-58798555200000,'y':2,'size':1.0000714294},
{'x':-58719672000000,'y':1,'size':1.0009357407},
{'x':-58759066800000,'y':1,'size':1},
{'x':-58756388400000,'y':13,'size':142.40716594176718},
{'x':-58698586800000,'y':2,'size':1.00580223955},
{'x':-58722346800000,'y':3,'size':1.0014996855833334},
{'x':-58774968000000,'y':2,'size':1.0001928935},
{'x':-58790602800000,'y':1,'size':1},
{'x':-58711809600000,'y':4,'size':1.2485375309166666},
{'x':-58640788800000,'y':14,'size':1.0008574988440475},
{'x':-58619707200000,'y':26,'size':1.004996395532255},
{'x':-58809096000000,'y':142,'size':178.25475083878007},
{'x':-58769611200000,'y':1,'size':1.0002283565},
{'x':-58688136000000,'y':1,'size':1.0011707755},
{'x':-58761745200000,'y':2,'size':1.00108078705},
{'x':-58764340800000,'y':7,'size':15.004249055057144},
{'x':-58748616000000,'y':6,'size':65.00773608663167},
{'x':-58777560000000,'y':31,'size':109.10096859034202},
{'x':-58695908400000,'y':3,'size':1.03856043015},
{'x':-58767019200000,'y':3,'size':1},
{'x':-58819460400000,'y':1,'size':1},
{'x':-58817041200000,'y':2,'size':1},
{'x':-58772289600000,'y':31,'size':1.0010876743777803},
{'x':-58701182400000,'y':2,'size':8.034942274350001},
{'x':-58853674800000,'y':3,'size':1},
{'x':-58724766000000,'y':3,'size':7.915135856483333},
{'x':-58835361600000,'y':5,'size':1},
{'x':-58806504000000,'y':1,'size':1},
{'x':-58827412800000,'y':2,'size':1},
{'x':-58872168000000,'y':1,'size':1},
{'x':-58874846400000,'y':1,'size':1},
{'x':-58735396800000,'y':1,'size':1.3625498958},
{'x':-58730122800000,'y':1,'size':1.0105258449},
{'x':-58709131200000,'y':1,'size':1.0001633681},
{'x':-58717080000000,'y':1,'size':589.125602731},
{'x':-58869576000000,'y':1,'size':1},
{'x':-58840632000000,'y':2,'size':1},
{'x':-58832683200000,'y':1,'size':1},
{'x':-58824817200000,'y':1,'size':1},
{'x':-58751208000000,'y':1,'size':1.0040476273},
{'x':-58785505200000,'y':1,'size':1},
{'x':-58801147200000,'y':1,'size':1},
{'x':-58787924400000,'y':2,'size':1.0004135301},
{'x':-58780238400000,'y':1,'size':1}]},
{'key':'Derived Collection','values':[{'x':-58724766000000,'y':3,'size':1575.588703287},
{'x':-58669646400000,'y':13,'size':717.3735890462661},
{'x':-58722346800000,'y':3,'size':497.0424076657667},
{'x':-58703860800000,'y':7,'size':1587.4903762955028},
{'x':-58711809600000,'y':23,'size':2075.9893317668448},
{'x':-58777560000000,'y':11,'size':2404.2099184162576},
{'x':-58630158000000,'y':4,'size':408.25971139975},
{'x':-58706452800000,'y':25,'size':2175.1700688446126},
{'x':-58806504000000,'y':2,'size':2326.687016155},
{'x':-58751208000000,'y':36,'size':5181.485350964822},
{'x':-58727444400000,'y':13,'size':2532.0824715263166},
{'x':-58732718400000,'y':11,'size':2651.8970357287735},
{'x':-58740667200000,'y':3,'size':2.0024075270333332},
{'x':-58659274800000,'y':5,'size':387.21845514002496},
{'x':-58782830400000,'y':2,'size':1980.335888545},
{'x':-58651329600000,'y':5,'size':944.3527044474499},
{'x':-58861627200000,'y':3,'size':4346.285466830001},
{'x':-58632836400000,'y':44,'size':717.7415464866614},
{'x':-58709131200000,'y':9,'size':1249.4452421616759},
{'x':-58622385600000,'y':3,'size':69.89980087388334},
{'x':-58764340800000,'y':2,'size':868.89965266},
{'x':-58759066800000,'y':2,'size':1394.69979894525},
{'x':-58774968000000,'y':8,'size':3842.2973937346424},
{'x':-58714401600000,'y':5,'size':320.78189549269},
{'x':-58735396800000,'y':4,'size':2024.2890286645002},
{'x':-58890571200000,'y':2,'size':4413.392958255},
{'x':-58966862400000,'y':4,'size':7727.722896911667},
{'x':-58856353200000,'y':2,'size':3570.726344705},
{'x':-58730122800000,'y':12,'size':2312.236766063354},
{'x':-58795876800000,'y':1,'size':1},
{'x':-58840632000000,'y':2,'size':2935.04621716},
{'x':-58817041200000,'y':5,'size':4336.941366718167},
{'x':-58695908400000,'y':3,'size':554.3214374862001},
{'x':-58719672000000,'y':2,'size':841.8289345835001},
{'x':-58656600000000,'y':9,'size':828.6399117595263},
{'x':-58887975600000,'y':3,'size':4732.566035333333},
{'x':-58677595200000,'y':3,'size':525.8942075077},
{'x':-58638110400000,'y':1,'size':144.430410799},
{'x':-58769611200000,'y':3,'size':2161.9408029033334},
{'x':-58635514800000,'y':2,'size':206.62682365155},
{'x':-58853674800000,'y':9,'size':6782.422453005392},
{'x':-58646059200000,'y':4,'size':340.63731325557495},
{'x':-58916833200000,'y':5,'size':6875.656664781334},
{'x':-58822138800000,'y':7,'size':4405.161643271667},
{'x':-58809096000000,'y':6,'size':83.11513749000666},
{'x':-58901198400000,'y':1,'size':2583.77476911},
{'x':-58780238400000,'y':4,'size':2364.3243247431333},
{'x':-58864219200000,'y':2,'size':3917.21592497},
{'x':-58640788800000,'y':1,'size':13.8643227894},
{'x':-58903790400000,'y':1,'size':2529.0281794},
{'x':-58698586800000,'y':2,'size':177.9088485129},
{'x':-58737988800000,'y':5,'size':1335.8913132743583},
{'x':-58874846400000,'y':3,'size':4404.803281786667},
{'x':-58717080000000,'y':5,'size':1392.4366070946166},
{'x':-58745937600000,'y':2,'size':2009.65895809},
{'x':-58869576000000,'y':3,'size':1},
{'x':-58819460400000,'y':1,'size':1928.25864936},
{'x':-58753882800000,'y':2,'size':1332.0907229636},
{'x':-58772289600000,'y':1,'size':1.0002835301},
{'x':-58761745200000,'y':1,'size':1.0001817245},
{'x':-58958913600000,'y':1,'size':3967.55532438},
{'x':-58790602800000,'y':1,'size':2056.9844951},
{'x':-58814366400000,'y':2,'size':1518.82927291135},
{'x':-58674916800000,'y':1,'size':424.056519942},
{'x':-58835361600000,'y':1,'size':1},
{'x':-58756388400000,'y':2,'size':1.00765927665},
{'x':-58858948800000,'y':1,'size':2013.76338794},
{'x':-58845902400000,'y':1,'size':1.0002003472},
{'x':-58743345600000,'y':1,'size':1},
{'x':-58811774400000,'y':1,'size':1}]}];

nv.addGraph(function() {
  var chart = nv.models.scatterChart()
                .showDistX(true)
                .showDistY(true)
                .color(d3.scale.category10().range());

  chart.yScale(d3.scale.log());
/*  chart.xAxis.tickFormat(d3.format('.02f'));*/
  chart.xAxis
      .showMaxMin(false)
      .tickFormat(function(d) { return d3.time.format('%x')(new Date(d)) });


    /* PHIL Was: d3.select('#chart svg') */
    d3.select(config.contextSelector).append('svg').attr('height', '400px')
      .datum(data)
    .transition().duration(500)
      .call(chart);

  nv.utils.windowResize(chart.update);

  return chart;
});


"><image src="invalid.jpg" mime-type="xml/svg"/></media>
      <caption>Here is a figure with a multi-line chart showing the poverty rate among different age groups over time in the United States.</caption>
    </figure>
  </section>



  <!-- ============== -->
  <!-- Math Example   -->
  <!-- ============== -->
  <section>
    <title>MathJax Example</title>
    <para>This math is typeset using MathJax instead of pmml2svg. One advantage is that we hopefully no longer need to generate PNG files. MathJax can be configured to generate HTML+CSS (should work in EPUB) or SVG (should work in PDF).</para>
    <equation>
      <math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow><mrow><mrow><mrow><msubsup><mo>&#x222B;</mo><mrow><mrow><mo>&#x2212;</mo><mi>&#x221E;</mi></mrow></mrow><mrow><mi>&#x221E;</mi></mrow></msubsup><mrow><mrow><mrow><mi>s</mi></mrow><mo>&#x2062;</mo><mfenced open="(" close=")"><mrow><mi>t</mi></mrow></mfenced></mrow><mo>&#x2062;</mo><msup><mi>e</mi><mrow><mfrac><mrow><mi>j</mi><mo>&#x2062;</mo><mn>2</mn><mo>&#x2062;</mo><mi>&#x3C0;</mi><mo>&#x2062;</mo><mrow><mi>k</mi></mrow><mo>&#x2062;</mo><mrow><mi>t</mi></mrow></mrow><mrow><mi></mi><msub><mi>T</mi><mi>s</mi></msub><mi></mi></mrow></mfrac></mrow></msup><mo>&#x2062;</mo><msup><mi>e</mi><mrow><mrow><mo>&#x2212;</mo><mrow><mo>(</mo><mi>j</mi><mo>&#x2062;</mo><mn>2</mn><mo>&#x2062;</mo><mi>&#x3C0;</mi><mo>&#x2062;</mo><mrow><mi>f</mi></mrow><mo>&#x2062;</mo><mrow><mi>t</mi></mrow><mo>)</mo></mrow></mrow></mrow></msup></mrow><mo>d</mo><mi><mrow><mi>t</mi>
        </mrow></mi></mrow><mo>=</mo><mrow><msubsup><mo>&#x222B;</mo><mrow><mrow><mo>&#x2212;</mo><mi>&#x221E;</mi></mrow></mrow><mrow><mi>&#x221E;</mi></mrow></msubsup><mrow><mrow><mrow><mi>s</mi></mrow><mo>&#x2062;</mo><mfenced open="(" close=")"><mrow><mi>t</mi></mrow></mfenced></mrow><mo>&#x2062;</mo><msup><mi>e</mi><mrow><mrow><mo>&#x2212;</mo><mrow><mo>(</mo><mi>j</mi><mo>&#x2062;</mo><mn>2</mn><mo>&#x2062;</mo><mi>&#x3C0;</mi><mo>&#x2062;</mo><mrow><mo>(</mo><mrow><mi>f</mi></mrow><mo>&#x2212;</mo><mfrac><mrow><mi>k</mi></mrow><mrow><mi></mi><msub><mi>T</mi><mi>s</mi></msub><mi></mi></mrow></mfrac><mo>)</mo></mrow><mo>&#x2062;</mo><mrow><mi>t</mi></mrow><mo>)</mo></mrow></mrow></mrow></msup></mrow><mo>d</mo><mi><mrow><mi>t</mi>
        </mrow></mi></mrow></mrow></mrow><mrow><mo>=</mo></mrow><mrow><mrow><mrow><mi>S</mi></mrow><mo>&#x2062;</mo><mrow><mo>(</mo><mrow><mi>f</mi></mrow><mo>&#x2212;</mo><mfrac><mrow><mi>k</mi></mrow><mrow><mi></mi><msub><mi>T</mi><mi>s</mi></msub><mi></mi></mrow></mfrac><mo>)</mo></mrow></mrow></mrow></mrow>
      </math>
    </equation>

    <para>Math with prefixes:</para>
    <equation>
      <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" display="block">
        <mml:mfrac><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:mfrac>
      </mml:math>
    </equation>
  </section>


<!-- The following sections are a "HACK" to get the ccap-physics styling and numbering to work -->
</section><!-- Close Section -->
</section><!-- Close Chapter -->
</section><!-- Close Book -->

</content>
